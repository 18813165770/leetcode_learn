/**
   十大排序算法
*/

#include<iostream>
#include<vector>
#include<cmath>
using namespace std;

/*
简单排序：
冒泡排序：最好O(n)   最坏O(n2)  平均O(n2)  空间O(1)  稳定
选择排序：最好O(n2)  最坏O(n2)  平均O(n2)  空间O(1)  不稳定
*/
void BubbleSort(vector<int> &arr){
    if(arr.empty() || arr.size()==1)
        return;
    int n = arr.size();
    for(int i=0;i<n;i++){
        for(int j=0;j<n-i-1;j++){
            if(arr[j]>arr[j+1]){
                int tmp = arr[j];
                arr[j]=arr[j+1];
                arr[j+1]=tmp;
            }
        }
    }
}

/***
选择排序
①遍历整个数组，找到最小位置元素的位置
②将其和序列的第一个元素进行交换，则第一个位置元素已排好序，对剩余部分继续排序
③对剩余未排序序列重复①②操作，直至整个序列都排好序
*/
void SelectSort(vector<int> &arr){
    if(arr.empty() || arr.size()==1)
        return;
    int mins = arr[0];
    int n = arr.size();
    for(int i=0;i<n;i++){
        for(int j=i;j<n;j++){
            if(arr[j]<=mins){
                mins = arr[j];
                int tmp=arr[j];
                arr[j]=arr[i];
                arr[i]=tmp;
            }
        }
    }
}

/*
*插入排序：
插入排序     最好O(n)  最坏O(n2) 平均O(n2)   空间O(1)  稳定
希尔排序     最好O(n)  最坏O(n2) 平均O(n1.3) 空间O(1)  不稳定
*/
/**
算法描述
①首先对前两个元素进行比较并排序
②将第三个元素放入到前两个有序数组的合适位置，完成后，前三个元素为有序数组
③再对下一个元素重复①②步骤，直至所有元素排序完成

对第i个元素来说，前面i-1个元素是拍好顺序的，因此，如果前面有序数组中第k(0<=k<=i-1)
个元素大于第i个元素，则k~i-1的元素都会大于它，因此，从第i-1位置的元素开始，
依次往后挪一位，最后在空的位置将原始的第i个元素的值填入，更好的利用了前部数组的有
序条件。
*/
void SampleInsertSort(vector<int> &arr){
    if(arr.empty() || arr.size()==1) return;
    int n = arr.size();
    for(int i=1;i<n;i++){
        int pre=i-1;
        int cur=arr[i];
        for(;pre>=0&&arr[pre]>cur;pre--){
            arr[pre+1]=arr[pre];
        }
        arr[pre+1]=cur;
    }
}

void ShellSort(vector<int> &arr){
    if(arr.empty() || arr.size()==1) return;
    int n = arr.size();
    int gap=n/2;
    while(gap>=1){
        for(int i=gap;i<n;i++){
            int pre=i-gap;
            int cur = arr[i];
            for(;pre>=0&&arr[pre]>cur;pre-=gap){
                arr[pre+gap]=arr[pre];
            }
            arr[pre+gap]=cur;
        }
        gap/=2;
    }
}

/**
归并排序  最好O(nlogN)  最坏O(nlogN) 平均O(nlogN)   空间O(n)     稳定
快速排序  最好O(nlogN)  最坏O(n2)    平均O(nlogN)   空间O(logn)  不稳定
*/

void Merge(vector<int> &vec, int beginPos, int midPos, int endPos)
{
	int leftLen, rightLen, i, j, k;

	leftLen = midPos - beginPos + 1;
	rightLen = endPos - midPos;

	vector<int> leftArr(leftLen);
	vector<int> rightArr(rightLen);

	// 数组分别保存左右两边数据
	for (i = 0; i < leftLen; i++)
	{
		leftArr[i] = vec[beginPos + i];
	}

	for (j = 0; j < rightLen; j++)
	{
		rightArr[j] = vec[midPos + 1 + j];
	}

	i = j = 0;
	k = beginPos;
	// 接下来从左右两数组比较合并
	while (i < leftLen && j < rightLen)
	{
		if (leftArr[i] <= rightArr[j])
		{
			vec[k++] = leftArr[i++];
		}
		else
		{
			vec[k++] = rightArr[j++];
		}
	}

	for (; i < leftLen; i++)		// 如果左数组还有剩余，则将剩余元素合并到vec
	{
		vec[k++] = leftArr[i];
	}
	for (; j < rightLen; j++)		// 如果右数组还有剩余，则将剩余元素合并到vec
	{
		vec[k++] = rightArr[j];
	}
}

void MergeSort(vector<int> &arr, int be, int en){
    int mid;
    if(be < en){
        mid = (be+en) / 2;
        MergeSort(arr, be, mid);   // 递归拆分左半边数组
        MergeSort(arr, mid+1, en); // 递归拆分右半边数组
        Merge(arr, be, mid, en);   // 合并数组
    }
}
void MergeSort(vector<int> &arr){
    MergeSort(arr, 0, arr.size()-1);
}

void QuickSortH(vector<int> &arr, int st, int en){
    int i=st;
    int j=en;
    int pivot = arr[st];
    if(i<j){
        while(i<j){
            while(i<j && arr[j]>=pivot) j--;
            arr[i]=arr[j];
            while(i<j && arr[i]<=pivot) i++;
            arr[j]=arr[i];
        }
        arr[i]=pivot;

        QuickSortH(arr,st, i-1);
        QuickSortH(arr,i+1, en);
    }
}

void QuickSort(vector<int> &arr){
    if(arr.empty() || arr.size()==1) return;
    int i=0, j=arr.size()-1;
    QuickSortH(arr,i, j);
}
/**
//堆排序整体的时间复杂度为O(n*log n). 空间复杂度O(1)  不稳定
*/
void adjust(vector<int> &arr, int par, int len){
    int left = par*2+1;
    int right = par*2+2;
    int parentIdx = par;
    if(left<len && arr[left]>arr[parentIdx]) parentIdx=left;
    if(right<len && arr[right]>arr[parentIdx]) parentIdx=right;
    if(parentIdx != par){
        int tmp=arr[parentIdx];
        arr[parentIdx]=arr[par];
        arr[par]=tmp;

        adjust(arr, parentIdx, len);
    }
}

void HeapSort(vector<int> &arr){
    if(arr.empty() || arr.size()==1) return;
    int n=arr.size();
    for(int i=n/2-1;i>=0;i--){
        adjust(arr, i, n);
    }
    for(int i=n-1;i>0;i--){
        int tmp=arr[0];
        arr[0]=arr[i];
        arr[i]=tmp;

        adjust(arr, 0, i);
    }
}
/**
计数排序 时间最好O(n+k) 最坏O(n+k)  平均O(n+k), 空间O(n+k)   稳定
桶排序   时间最好O(n+k) 最坏O(n2)   平均O(n+k), 空间O(n+k)   稳定
基数排序 时间最好O(n*k) 最坏O(*k)   平均O(n*k), 空间O(n+k)   稳定
*/

/**
解题思路：
1.先找出序列中最大值，最小值
2.申请辅助空间（最大值-最小值+1），每个元素都存放到下标（当前元素-最小值）的桶里，桶里放该序列中相同的元素的个数。
3.依次遍历桶，桶当前元素就是（下标+最小值），输出次数就是桶里存放的值。再依次放到原先的序列里，就是已经排序好的序列。
*/
void CountingSort(vector<int> &arr){
    //1. 获得待排序数据的最大值,最小值
    int minx=arr[0], maxx=arr[0];
    for(int i=1;i<arr.size();i++){
        if(arr[i]<minx) minx=arr[i];
        if(arr[i]>maxx) maxx=arr[i];
    }
    //2.申请辅助空间，大小为 (max-min+1)。
    vector<int> res(maxx-minx+1);

    //3.对每个元素的频次进行统计
    for(int i=0;i<arr.size();i++){
        res[arr[i]-minx]++;
    }
    //4.输出回源数组中
    int k=0;
    for(int i=0;i<res.size();i++){
        for(int j=0;j<res[i];j++){
            arr[k++] = i+minx;
        }
    }
}
/**
解题思路：
1.先找出序列中最大值，最小值
2.申请辅助空间（最大值-最小值+1），定义每个桶的大小，先确定有多少桶，
3.依次将序列里的元素存到每个桶里。
4.遍历桶，对每个桶的元素排序后，再依次放到原先的序列里
*/
void BucketSort(vector<int> &arr){
    //1. 获得待排序数据的最大值,最小值
    int minx=arr[0], maxx=arr[0];
    for(int i=0;i<arr.size();i++){
        if(arr[i]<minx) minx=arr[i];
        if(arr[i]>maxx) maxx=arr[i];
    }
    if(arr.empty() || minx > maxx) return;

    //2.申请辅助空间，定义每个桶的大小，有多少桶
    vector<vector<int>> bucket;
    int bucketsize = 5;  //每个桶最多5个元素
    bucket.resize((maxx-minx+1)/bucketsize);

    //3.元素存储到桶中
    for(int i=0;i<arr.size();i++){
        bucket[(arr[i]-minx)/bucketsize].push_back(arr[i]);
    }

    //4.对每个桶的元素排序后，再依次放到原先的vector里
    int k=0;
    for(int i=0;i<bucket.size();i++){
        SampleInsertSort(bucket[i]); // 对每个桶里的元素排序
        for(int j=0;j<bucket[i].size();j++){
            arr[k++]=bucket[i][j];
        }
    }
}

/**
基数排序：
假设原来有一串数值如下所示：
73, 22, 93, 43, 55, 14, 28, 65, 39, 81
第一步：根据个位数的数值，将它们分配至编号0到9的桶子中，再串起来：
81, 22, 73, 93, 43, 14, 55, 65, 28, 39
第二步：根据十位数来分配，将它们分配至编号0到9的桶子中，再串起来：
14, 22, 28, 39, 43, 55, 65, 73, 81, 93
则持续进行以上的动作直至最高位数为止。
*/
/**
解题思路：
1.利用桶的思路，先找出序列中最大值，并确定最大值的位数，可以知道需要循环几遍
2.在每轮循环（位数）中，先申请空间10个桶，（因为是分配到0-9的桶里），将序列中的值根据位数取余放到对应桶里（桶里不用排序）。
3.再依次将每个桶里的值取出放回原序列中。再执行2，3直到循环结束。
*/
int pow(int x, int y){
    if(y==0) return 1;
    int i,res=1;
    for(i=1;i<=y;i++){
        res *= x;
    }
    return res;
}
void RadixSort(vector<int>&arr) {
	//最大位数
	int maxx = arr[0];
	for (int i = 0; i < arr.size(); ++i){
        if(arr[i]>maxx)
            maxx=arr[i];
	}
	int digit=1;
	while(maxx/10>0){
        digit++;
        maxx /= 10;
	}

	for (int i = 0; i < digit; ++i) {
        //十进制
		vector<vector<int>>radix(10);
		//分配
		for (int j = 0; j < arr.size(); ++j) {
			int index = int(arr[j] / pow(10, i)) % 10;
			radix[index].push_back(arr[j]);
		}
		int k = 0;
		//收集
		for (int j = 0; j < radix.size(); ++j) {
			for (int m=0;m<radix[j].size();m++) {
				arr[k++] = radix[j][m];
			}
		}
	}
}


int main(){
    vector<int> arr={3, 44, 38, 5, 47, 15, 36, 26};
    //十大排序算法
    //BubbleSort(arr);
    //SelectSort(arr);
    //SampleInsertSort(arr);
    //ShellSort(arr);
    MergeSort(arr);
    //QuickSort(arr);
    //HeapSort(arr);
    //CountingSort(arr);
    //BucketSort(arr);
    //RadixSort(arr);
    for(int i=0;i<arr.size();i++)
        cout<<arr[i]<<" ";
    cout<<endl;
    return 0;
}

# 二叉树

本期使用的二叉树数据结构

```
class TreeNode {
    int val;
    TreeNode left;
    TreeNode right;
    TreeNode(int x) { val = x; }
}
```

二叉树的题型

1.遍历：前序、中序、后序、层次遍历

2.二叉搜索树

3.中等难度题： 二叉树展开为链表， 最大二叉树
---------------------------------------------------------------------------------------------------

1.层次遍历问题解法：结合队列（先进先出）、栈（先进后出）的使用。
队列模板解法：
1.1初始化：一个队列queue<TreeNode*> q， 将root节点入队列q
1.2如果队列不空，做如下操作：
1.3弹出队列头，保存为node，将node的左右非空孩子加入队列
1.4做1.2,1.3步骤，直到队列为空

如果不需要确定当前遍历到那一层，模板：
void bfs(){
    vis[] = {0}  // or set
    queue<int> q(start_val);
    while(!q.empty()){
        int cur = q.front();
        for(遍历cur所有的相邻节点next){
            if(next有效 && vis[next]==0)
            {
                vis[next]=1;
                q.push(next);
            }
        }
    }
}

如果要确定当前遍历到那一层，模板：
void bfs() {
 int level = 0;
 vis[] = {0}; // or set
 queue<int> pq(original_val);
 while (!pq.empty()) {
     int sz = pq.size();

     while (sz--) {
             int cur = pq.front(); pq.pop();
         for (遍历cur所有的相邻节点nex) {
             if (nex节点有效 && vis[nex] == 0) {
                 vis[nex] = 1;
                 pq.push(nex)
             }
         } // end for
     } // end inner while
     level++;
 } // end outer while
}

2.
前序遍历/中序遍历/后序遍历

//前序遍历：递归
void preOrder(TreeNode *root){
    vector<int> res;
    if(root){
        res.push_back(root->val);
        preOrder(root->left);
        preOrder(root->right);
    }
}

//前序遍历：非递归 使用栈
/**
使用一个栈stack。
先将头结点压入，再在栈不为空的前提下循环：
1.弹出栈顶元素
2.判断该节点右孩子不为空，压入该右孩子
3.判断该节点左孩子不为空，压入该左孩子（此时该值为栈顶元素），循环1的操作
故，第一步把头结点弹出，然后先压右再压左，弹出的顺序便是先弹左再弹右，符合中左右的顺序。
*/
void preOrder(TreeNode *root){
    vector<int> res;
    stack<TreeNode *> s;
    s.push(root);
    TreeNode *cur = NULL;
    while(!s.empty()){
        TreeNode *cur = s.top();
        res.push_back(cur->val);
        s.pop();
        if(cur->right)
            s.push(cur->right);
        if(cur->left)
            s.push(cur->left);
    }
}

//中序遍历 递归
void InOrder(TreeNode *root){
    vector<int> res;
    if(root){
        InOrder(root->left);
        res.push_back(root->val);
        InOrder(root->right);
    }
}

//中序遍历 非递归 使用栈
/**
使用一个栈stack。
在节点不为空 | 在栈不为空的前提下循环：
1.节点不为空，将节点的左边界（左孩子...)全部顺序入栈
2.节点为空，弹出栈顶元素，将元素的右孩子压入栈中*/
void InOrder(TreeNode *root){
    if(root == NULL) return;
    vector<int> res;
    stack<TreeNode *> s;
    TreeNode *cur = root;
    if(!s.empty() || cur != NULL){
        if(cur!=NULL){
            s.push(cur);
            cur=cur->left;
        }else{
            cur = s.top();
            s.pop();
            res.push_back(cur->val);
            if(cur->right)
                cur=cur->right;
        }
    }
}

//后序遍历 递归
void PostOrder(TreeNode *root){
    vector<int> res;
    if(root){
        PostOrder(root->left);
        PostOrder(root->right);
        res.push_back(root->val);
    }
}

//后序遍历 非递归 栈
void PostOrder(TreeNode *root){
    if(root == NULL) return;
    vector<int> res;
    stack<TreeNode *> s;
    TreeNode *cur=root;
    TreeNode *visitFlag=NULL;
    while(!s.empty() || cur != NULL){
        if(cur){
            s.push(cur);
            cur=cur->left;
        }else{
            cur = s.top();
            if(cur->right && cur->right != visitFlag){
                cur = cur->right;
                s.push(cur);
                cur=cur->left;
            }else{
                cur = s.top();
                s.pop();
                visitFlag = cur;
                res.push_back(cur->val);
                cur = null;
            }
        }
    }
}

------------------------------------------------------------------------
2.二叉搜索树
题目1：给出一个整数n，返回从1到n构建的所有不同的二叉搜索树。

思路1  递归：
1.从1到n每一个数都可以作为根结点，所以肯定有一个循环
2.循环中每选择一个i，都会把[1,n]的数组划分成两段[1,i-1][i+1,n]。每段都有m，n个子树集合，
3.然后将左右子树相互配对，每一个左子树都与所有右子树匹配，每一个右子树都与所有的左子树匹配。然后将两个子树插在根结点上。
最后，把根结点放入链表中。i为根的二叉搜索树有m*n个

vector<TreeNode*>  generateTrees(int n) {
	if(n==0)
		return null;
	return help(1,n);
}
vector<TreeNode*> help(int start, int end){
	vector<TreeNode*> res;
	if(start>end)
		res.push_back(null);//这个容易忘记，不加的话下面会空指针异常
	for(int i=start;i<=end;i++){
		vector<TreeNode*> left = help(start, i-1);
		vector<TreeNode*> right = help(i+1, end);
		for(TreeNode l:left){
			for(TreeNode r:right){
				TreeNode *root = new TreeNode(i);
				root->left = l;
				root->right = r;
				res.push_back(root);
			}
		}
	}
	return res;
}

思路2  如果不要求输出全部二叉搜索树，只要求输出二叉搜索树的个数。
卡塔兰数：
这道题的规律在于，[1,n]这n个数都可以作为根结点，而当i成为根节点时，以i为根节点的二叉搜索树的个数就是[1,i-1]二叉搜索树的个数 * [i+1,n]二叉搜索树的个数。

n=0 dp[0]=1
n=1 根节点1 左边节点数0 右边节点数0  dp[1]=dp[0]*dp[0]=1
n=2 根节点1 左边节点数0 右边节点数1  
	根节点2 左边节点数1 右边节点数0  dp[2]=dp[0]*dp[1]+dp[1]*dp[0]=2
n=3 根节点1 左边节点数0 右边节点数2  
	根节点2 左边节点数1 右边节点数1  
	根节点3 左边节点数2 右边节点数0  
	dp[3]=dp[0]*dp[2]+dp[1]*dp[1]+dp[2]*dp[0]=2+1+2=5
...
n+1 dp[n]=(0-n)CiCn-i

int numTrees(int n){
	vector<int> res;
	res[0]=res[1]=1;
	for(int i=2;i<=n;i++){
		for(int j=0;j<i;j++){
			res[i] += res[j]*res[i-j-1]
		}
	}
	res[n];
}


3.探讨递归和非递归问题
树的递归题目，其实无非就是两点：1.先递归左子树还是先递归右子树；2.逻辑放在递归前还是逻辑放在递归后。
3.1  《114. 二叉树展开为链表》
题意：给定一棵树，根据前序遍历将其展开为一个【只有右子树有值的，左子树为null的】类似于链表的结构，如下图
        1
     /	  \
    2      5
  /  \      \
3      4     6
flatten:
 1
  \
   2
    \
     3
      \
       4
        \
         5
	  \ 
           6


//思路：迭代：一般来讲，广搜用队列，深搜用栈
//前序遍历的顺序是根节点->左->右，所以我们先把右子树结点入栈，再把左子树结点入栈，然后依次操作
void flatten(TreeNode *root){
    if(root==NULL) return;
    stack<TreeNode *> s;
    s.push(root);
    while(!s.empty()){
        TreeNode *cur = s.top();
        if(cur->right)
            s.push(cur->right);
        if(cur->left)
            s.push(cur->left);
        cur->left=NULL;
        if(s.empty()){
            cur->right=NULL;
        }else{
            cur->right=s.top();
        }
    }
}

//递归
TreeNode *pre=NULL;
void flatten(TreeNode *root){
    if(root==NULL) return;
    flatten(root->right);
    flatten(root->left);
    root->right=prev;
    root->left=null;
    pre=root;
}


95. 最大二叉树
题意： 给定一个不含重复元素的整数数组。一个以此数组构建的最大二叉树定义如下：
 1.二叉树的根是数组中的最大元素。
 2.左子树是通过数组中最大值左边部分构造出的最大二叉树。
 3.右子树是通过数组中最大值右边部分构造出的最大二叉树。
 4.通过给定的数组构建最大二叉树，并且输出这个树的根节点。
 Input:[3,2,1,6,0,5]
      6
    /   \ 
  3      5
   \    /
    2  0
     \
       1

//递归 这道题其实是一道简单版的构造一棵“二叉搜索树”，只是这的“二叉搜索树”被题中规定的“最大树”替换了。
public TreeNode constructMaximumBinaryTree(vector<int> nums) {
    return help(nums, 0, nums.size());
}
TreeNode help(vector<int> nums, int st, int en){
    if(st > en) return NULL;
    int flag=0;
    int maxnum=-1;
    for(int i=st;i<=en;i++){
        if(nums[i]>=maxnum){
            maxnum = nums[i];
            flag=i;
        }
    }
    TreeNode *root = new TreeNode(maxnum);
    root->left = help(nums, st, flag-1);
    root->right = help(nums, flag+1, en);
    return root;
}

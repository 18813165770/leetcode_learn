/**
二叉树题解：
1.二叉树的层次遍历问题：结合队列/栈
（JZ22 从上往下打印二叉树,
 JZ59 按之字形顺序打印二叉树。）
2.对称问题：
（JZ18 二叉树的镜像,
 JZ58 对称的二叉树,
 JZ17 树的子结构)

3.遍历问题：
（JZ4 重建二叉树:给前序和中序，重建二叉树并返回头节点
JZ23 二叉搜索树的后序遍历序列

4.平衡二叉树


）
*/
/**
1.层次遍历问题解法：结合队列（先进先出）、栈（先进后出）的使用。
队列模板解法：
1.1初始化：一个队列queue<TreeNode*> q， 将root节点入队列q
1.2如果队列不空，做如下操作：
1.3弹出队列头，保存为node，将node的左右非空孩子加入队列
1.4做1.2,1.3步骤，直到队列为空

如果不需要确定当前遍历到那一层，模板：
void bfs(){
    vis[] = {0}  // or set
    queue<int> q(start_val);
    while(!q.empty()){
        int cur = q.front();
        for(遍历cur所有的相邻节点next){
            if(next有效 && vis[next]==0)
            {
                vis[next]=1;
                q.push(next);
            }
        }
    }
}
如果要确定当前遍历到那一层，模板：
void bfs() {
 int level = 0;
 vis[] = {0}; // or set
 queue<int> pq(original_val);
 while (!pq.empty()) {
     int sz = pq.size();

     while (sz--) {
             int cur = pq.front(); pq.pop();
         for (遍历cur所有的相邻节点nex) {
             if (nex节点有效 && vis[nex] == 0) {
                 vis[nex] = 1;
                 pq.push(nex)
             }
         } // end for
     } // end inner while
     level++;
 } // end outer while
}
*/
/**
JZ22 从上往下打印二叉树
*/
//基础模板题，考察对队列queue的使用
//时间复杂度：O(n),二叉树的每个节点遍历一次, 空间复杂度：O(n),二叉树的每个节点入队列一次
class Solution {
public:
    vector<int> PrintFromTopToBottom(TreeNode* root) {
        vector<int> res;
        if(!root) return res;
        queue<TreeNode*> q;
        q.push(root);
        res.push_back(root->val);
        while(!q.empty()){
            int s = q.size();
            for(int i=0;i<s;i++){
                TreeNode *tmp = q.front();
                if(tmp->left)
                {
                    res.push_back(tmp->left->val);
                    q.push(tmp->left);
                }
                if(tmp->right){
                    res.push_back(tmp->right->val);
                    q.push(tmp->right);
                }
                q.pop();
            }
        }
        return res;
    }
};

/**
JZ59 按之字形顺序打印二叉树。
题意：之字形打印二叉树，即第一行按照从左到右的顺序打印，第二层按照从右至左的顺序打印，第三行按照从左到右的顺序打印，其他行以此类推

解题思路一： 使用队列，复杂度O(n2),O(1)
此题跟“按层打印二叉树”，仅有一点区别，“按层打印二叉树”是每层都按照从左到右打印二叉树。
而此题是，按照奇数层，从左到右打印，偶数层，从右到左打印。


解题思路二：使用两个栈,复杂度O(n),O(n)
一个栈保存当前层节点，一个栈保存下一层节点。入栈规则如下：
当前层为奇数层时：下一层为从左到右输出，故从右到左入栈即可。
当前层为偶数层时：下一层为从右到左输出，故从左到右入栈即可。

*/
//方法一：
class Solution {
public:
    vector<vector<int>> Print(TreeNode* pRoot) {
        vector<vector<int>> res;
        if(!pRoot) return res;
        queue<TreeNode *> q;
        q.push(pRoot);
        int level=0;
        while(!q.empty()){
            int s = q.size();
            vector<int> ans;
            while(s--){
                TreeNode *tmp = q.front();
                q.pop();
                ans.push_back(tmp->val);
                if(tmp->left){
                    q.push(tmp->left);
                }
                if(tmp->right){
                    q.push(tmp->right);
                }
            }
            level++;
            if(!(level&1)){  //奇数层
                reverse(ans.begin(), ans.end());
            }
            res.push_back(ans);
        }
        return res;
    }
};
//方法二：
class Solution {
public:
    vector<vector<int>> Print(TreeNode* pRoot) {
        vector<vector<int>> res;
        if(!pRoot) return res;
        stack<TreeNode*> stk1;
        stack<TreeNode*> stk2;
        stk1.push(pRoot);
        while(!stk1.empty() || !stk2.empty()){
            vector<int> tmp_stk1;
            while(!stk1.empty()){
                TreeNode *tmp=stk1.top();
                stk1.pop();
                tmp_stk1.push_back(tmp->val);
                if(tmp->left){
                    stk2.push(tmp->left);
                }
                if(tmp->right){
                    stk2.push(tmp->right);
                }
            }
            if(!tmp_stk1.empty()){
                res.push_back(tmp_stk1);
            }
            tmp_stk1.clear();

            while(!stk2.empty()){
                TreeNode *tmp = stk2.top();
                stk2.pop();
                tmp_stk1.push_back(tmp->val);
                if(tmp->right){
                    stk1.push(tmp->right);
                }
                if(tmp->left){
                    stk1.push(tmp->left);
                }
            }
            if(!tmp_stk1.empty()){
                res.push_back(tmp_stk1);
            }
        }
        return res;
    }

};

/**
JZ18 二叉树的镜像
*/
//方法一：递归（前序遍历）， 时间复杂度O(N) 空间复杂度O(N)
class Solution {
public:
    TreeNode* Mirror(TreeNode* pRoot) {
        if(pRoot==NULL) return pRoot;

        TreeNode *tmp=pRoot->left;
        pRoot->left=pRoot->right;
        pRoot->right=tmp;

        Mirror(pRoot->left);
        Mirror(pRoot->right);

        return pRoot;
    }
};
//bfs 队列，O(n),O(n)
public:
    TreeNode* Mirror(TreeNode* pRoot) {
        if(pRoot==NULL) return pRoot;
        queue<TreeNode*> q;
        q.push(pRoot);
        while(!q.empty()){
            int s = q.size();
            for(int i=0;i<s;i++){
                TreeNode *l = q.front()->left;
                TreeNode *r = q.front()->right;
                if(l) q.push(l);
                if(r) q.push(r);
                q.front()->right=l;
                q.front()->left=r;
                q.pop();
            }
        }
        return pRoot;
    }
};
/**
JZ58 对称的二叉树

解题思路：
自顶向下，递归求解即可。
设置一个递归函数isSame(r1, r2),表示如果对称，返回true，否则返回false
递归终止条件：r1==nullptr && r2==nulllptr, 直接返回true，否则，如果只有一个为nullptr，返回false
下一步递归：如果r1->val == r2->val, 则isSame(root1->left, root2->right) && isSame(root1->right, root2->left);
*/
class Solution {
public:
    bool isSame(TreeNode* &r1, TreeNode* &r2){
        if(r1==NULL && r2==NULL) return true;
        if((!r1&&r2) || (r1&&!r2) || r1->val != r2->val) return false;
        return isSame(r1->left, r2->right) && isSame(r1->right, r2->left);
    }
    bool isSymmetrical(TreeNode* pRoot) {
        return isSame(pRoot,pRoot);
    }
};
/**
JZ17 树的子结构
描述
输入两棵二叉树A，B，判断B是不是A的子结构。（ps：我们约定空树不是任意一个树的子结构）

输入：
{8,8,#,9,#,2,#,5},{8,9,#,2}
返回值：
true
*/
class Solution {
public:
    //深度优先遍历DFS
    bool isPart(TreeNode* p1, TreeNode* p2){
        if(!p2) return true; //p2树为空，则为真子树
        if(!p1 || p1->val!=p2->val) return false; //p1为空，或者根节点不相同则为假
        return isPart(p1->left, p2->left) && isPart(p1->right, p2->right);
    }
    bool HasSubtree(TreeNode* pRoot1, TreeNode* pRoot2) {
        if(pRoot2==NULL || pRoot1==NULL) return false;
        if(isPart(pRoot1, pRoot2)) return true;
        return HasSubtree(pRoot1->left, pRoot2) || HasSubtree(pRoot1->right, pRoot2);
    }
};


/**
JZ23 二叉搜索树的后序遍历序列
*/
class Solution {
public:
    bool IsBST(const vector<int>& sequence, const int start, const int end){
        if (start>=end) return true;  // 可能出现start>end的情况

        int pivot;
        for (pivot=start; sequence[pivot]<sequence[end]; ++pivot);  // 查找分界点
        for (int i=pivot; i<=end; ++i)
            if (sequence[i]<sequence[end]) return false;
        return IsBST(sequence, start, pivot-1) && IsBST(sequence, pivot, end-1);
    }
    bool VerifySquenceOfBST(vector<int> sequence) {
        if(sequence.size() == 0)
            return false;
        return IsBST(sequence, 0, sequence.size()-1);
    }
};
/**
JZ24 二叉树中和为某一值的路径
*/
class Solution {
public:
    //时间复杂度：O(n), 树的所有节点需要遍历一次, 空间复杂度：O(n), 当树退化到链表时，递归空间为O(n)
    void dfs(TreeNode* root,int expectNumber, vector<vector<int>> &res, vector<int> &path){
        if(!root) return;;
        path.push_back(root->val);
        expectNumber-=root->val;
        if((!root->left) && (!root->right) && expectNumber==0)
            res.push_back(path);
        dfs(root->left, expectNumber, res,path);
        dfs(root->right, expectNumber, res,path);
        path.pop_back();
    }
    vector<vector<int>> FindPath(TreeNode* root,int expectNumber) {
        vector<vector<int>> res;
        vector<int> path;
        dfs(root, expectNumber, res, path);
        return res;
    }
};
/**
JZ26 二叉搜索树与双向链表
*/
/**
方法一：最简单的方法：
由于二叉搜索树的特性，左子树<根<右子树，那么当我们用中序遍历时遍历的顺序
会是递增的。
我们用一个vector将节点存下来，后面按照顺序调整链接即可。
*/
class Solution {
public:
    void ConvertDfs(TreeNode* pRootOfTree, vector<TreeNode*> &res){
        if(pRootOfTree->left)
            ConvertDfs(pRootOfTree->left, res);
        res.push_back(pRootOfTree);
        if(pRootOfTree->right)
            ConvertDfs(pRootOfTree->right, res);
    }
    TreeNode* Convert(TreeNode* pRootOfTree) {
        if(pRootOfTree==NULL)
            return pRootOfTree;
        vector<TreeNode*> res;
        ConvertDfs(pRootOfTree, res);
        int m = res.size();
        for(int i=0;i<m;i++){
            if(i<m-1) res[i]->right = res[i+1];
            if(i>0) res[i]->left = res[i-1];
        }
        return res[0];
   }
};


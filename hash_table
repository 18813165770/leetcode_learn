哈希表


1.基础知识

使用数组来做哈希的题，题目都限制了数值的大小。而且哈希值比较少、数值分散、跨度大，使用数组则造成空间的浪费

哈希法
当需要快速判断一个元素是否在集合里时，考虑用哈希法。哈希法“使用空间换时间”，因为用额外的数组、map、set来存放数据。
哈希函数：把数据转成哈希表上的索引就是哈希函数，
哈希碰撞：如果数据比哈希表大很多，就会存在多个值在同一个索引位置上，此时需要用哈希碰撞，哈希碰撞分类拉链法和线性探测法
    拉链法：把同一个索引上的值存储到链表里。
    线性探测法：要求哈希表的空间>数值空间，如果有索引位置冲突问题，就去向后找一个空位来存放数值。

常见的哈希结构：set，map，数组。

c++里set和map都提供以下三种数据结构。
c++中set，有三种类型：
std::unordered_set          底层实现是哈希表，  key无序   查找元素O(1)
std::set                    底层实现是红黑树    key有序   查找元素O(logn)
std::multiset               底层实现是红黑树    key有序   查找元素O(logn)

c++中map，有三种类型：
std::unordered_map          底层实现是哈希表，  key无序   查找元素O(1)
std::map                    底层实现是红黑树    key有序   查找元素O(logn)
std::multimap               底层实现是红黑树    key有序   查找元素O(logn)



2.哈希表的题目

2.1 数组作为哈希表：数组就是简单的哈希表。题目中表明是小写字母，使用26位数组来完成就可以。
该题主要包括：
	242.有效的字母异位词， 	
	1002 查找常用字符，
	383： 赎金题

Leetcode：242.有效的字母异位词（简单）
给定两个字符串 s 和 t ，编写一个函数来判断 t 是否是 s 的字母异位词。
注意：若 s 和 t 中每个字符出现的次数都相同，则称 s 和 t 互为字母异位词。

输入: s = "anagram", t = "nagaram"
输出: true
示例 2:

输入: s = "rat", t = "car"
输出: false


思路1：哈希表 时间复杂度O(n)，空间复杂度O(n)
1.边界条件：s和t的字母个数相同，若不同则不是异位词，返回false。
2.使用哈希表建立一个无序的map，将s里的元素存储到map里，key是元素，value是个数。
3.遍历t，对每个元素在map中将value值-1，如果map中查不到则返回false
4.重新遍历一遍s，若有元素value!=0,则表示t中有元素个数超过s中个数或者少于s中的个数，返回false
5.以上条件都满足，返回true。


class Solution {
public:
    bool isAnagram(string s, string t) {
        if(s.length() != t.length())
            return false;
        std::unordered_map<char, int> map;
        for(int i=0;i<s.length();i++){
            map[s[i]]++;
        }
        for(int i=0;i<t.length();i++){
            if(map.count(t[i])){
                map[t[i]]--;
            } else{
                return false;
                    }
         }
        for(int i=0;i<s.length();i++){
            if(map[s[i]] != 0)
                return false;
            }
            return true;
        }
};




思路2：时间复杂度O(n)，空间复杂度O(26)
使用长度为26的数组arr，表示26个英文字母。此数组只需要记住相对位置即可，不用考虑ascII
1.边界条件：s和t的字母个数相同，若不同则不是异位词，返回false。
2.建立26个元素的数组，遍历s，每个元素arr[s[i]-'a']个数+1
3.遍历t，对每个元素arr[t[i]-'a']个数-1
4.再遍历一次数组arr，如果有位置的个数!=0，则表示s和t不同


class Solution {
public:
    bool isAnagram(string s, string t) {
        if(s.length() != t.length())
            return false;
        vector<int> res(26, 0);
        for(int i=0;i<s.length();i++){
            res[s[i]-'a']++;
            res[t[i]-'a']--;
        }
        for(int i=0;i<26;i++){
            if(res[i] != 0)
                return false;
        }
        return true;
    }
};


Leetcode：1002 查找常用字符
给定仅有小写字母组成的字符串数组 A，返回列表中的每个字符串中都显示的全部字符（包括重复字符）组成的列表。例如，如果一个字符在每个字符串中出现 3 次，但不是 4 次，则需要在最终答案中包含该字符 3 次。你可以按任意顺序返回答案。
提示：
    1.
1 <= A.length <= 100
    2.
1 <= A[i].length <= 100
    3.
A[i][j] 是小写字母

示例 1：
输入：["bella","label","roller"]
输出：["e","l","l"]

示例 2：
输入：["cool","lock","cook"]
输出：["c","o"]


思路1：使用哈希法，建立26个字符的数组统计每个字符出现的频率，然后取频率最小的值，转成最终输出形式即可。


1.建立一个26个字符的数组has，先统计第一个字符串所有字符出现的次数。
2.从第二个字符串开始遍历，先存储到新的数组otherHas，然后每个字符取min（otherHas， has）中最少次数，更新has这个数组
3.重复2，直到全部字符串遍历完
4.建立返回的数组，统计数组has中每个字符的次数，转成输出的形式


class Solution {
public:
    vector<string> commonChars(vector<string>& words) {
        vector<string> res;
        vector<int> has(26, 0);


        if(words.size() == 0) return res;
        
        for (int i = 0; i < words[0].size(); i++) {
            has[words[0][i] - 'a']++;
        }


        for (int i = 1; i < words.size(); i++) {
            vector<int> otherHas(26, 0);


            for (int j = 0; j < words[i].size(); j++) {
                otherHas[words[i][j] - 'a']++;
            }


            for(int k = 0;k < 26; k++){
                has[k] = min(has[k], otherHas[k]);
            }
        }


        for(int i=0;i<26;i++){
            while(has[i] != 0){
                string s(1, i+'a');
                res.push_back(s);


                has[i]--;
                
            }
        }
        return res;
    }
};



Leetcode383： 赎金题

给定一个赎金信 (ransom) 字符串和一个杂志(magazine)字符串，判断第一个字符串 ransom 能不能由第二个字符串 magazines 里面的字符构成。如果可以构成，返回 true ；否则返回 false。

(题目说明：为了不暴露赎金信字迹，要从杂志上搜索各个需要的字母，组成单词来表达意思。杂志字符串中的每个字符只能在赎金信字符串中使用一次。)

示例 1：
输入：ransomNote = "a", magazine = "b"
输出：false
示例 2：
输入：ransomNote = "aa", magazine = "ab"
输出：false
示例 3：
输入：ransomNote = "aa", magazine = "aab"
输出：true

题目含义：ransom是magazine的一部分，并且ransom每个元素只出现一次。


思路一：哈希表法 （16 ms）
由于key无序，且可以通过次数判断是不是false，所以用unordered_map<char, int>

class Solution {
public:
    bool canConstruct(string ransomNote, string magazine) {
        std::unordered_map<char, int> map;
        for(int i = 0; i < ransomNote.length(); i++){
            map[ransomNote[i]]++;
        }
        for(int i = 0; i < magazine.length(); i++){
            map[magazine[i]]--;
        }
        //通过遍历两个数组，目前map中只有两种情况，元素value=0， value=负
        for(auto it=map.begin(); it != map.end(); it++){
            if(it->second > 0)
                return false;
        }
        return true;
    }
}

思路二：数组法 （4 ms）
时间复杂度O(m+n), 只遍历一遍ransomNote和magazine， 空间复杂度O(1)，只使用常数的存储空间。
class Solution {
public:
    bool canConstruct(string ransomNote, string magazine) {
        /**
        通过题目：提示显示两个字符串均只含有小写字母，因此可以考虑用26位数组，数组也是一种简单的哈希，因为map需要维护红黑树或者哈希表，哈希表需要建立哈希函数，因此使用数组更高效
        */
        vector<int> res(26, 0);
        for(int i = 0; i < ransomNote.length(); i++){
            res[ransomNote[i] - 'a']++;
        }
        for(int i = 0; i < magazine.length(); i++){
            res[magazine[i] - 'a']--;
        }
        for(int i = 0; i< 26; i++){
            if(res[i] > 0)
                return false;
        }
        return true;
    }
};

2.2 map作为哈希表：1：Two Sum

Leetcode 1：Two Sum
给定一个整数数组 nums 和一个整数目标值 target，请你在该数组中找出 和为目标值 target  的那 两个 整数，并返回它们的数组下标。
你可以假设每种输入只会对应一个答案。但是，数组中同一个元素在答案里不能重复出现。
输入：nums = [2,7,11,15], target = 9
输出：[0,1]

输入：nums = [3,2,4], target = 6
输出：[1,2]

解题思路：
查找表法（以空间换时间的思想），最常用的实现：
哈希表
平衡二叉搜索树


方法一：暴力方法：双指针法，两层循环，时间复杂度O(n2)，空间复杂度O(1)
枚举整个数组中每一个x，寻找是否存在target-x。因为位于x之前的元素都和x匹配过，因此不需要匹配，而每个元素不会被使用两次，所以需要在x之后寻找元素target-x。
class Solution {
public:
    vector<int> twoSum(vector<int>& nums, int target) {
        //暴力方法：两层循环
        vector<int> res;
        for(int i=0;i<nums.size()-1;i++){ //第一个元素一定不是数组中最后一个元素
            for(int j=i+1;j<nums.size();j++){
                if(nums[i] + nums[j] == target){
                    res.push_back(i);
                    res.push_back(j);
                }
            }
        }
        return res;
    }
};

方法二：c++里的map，因为该题不需要key有序，可以使用unordered_map效率更高，底层是哈希表。
思路：
1.先建立一个map，将元素存到map中，key是元素值，value是下标
2.遍历数组，对当前元素nums[i]，在map中查找是否有target-nums[i]这个key，如果有且i != map[target-nums[i]]，可以把当前元素下标i和map[target-nums[i]]的下标存到vector中，因为只会有一个答案，因此找到后返回即可。
 
class Solution {
public:
    vector<int> twoSum(vector<int>& nums, int target) {
        vector<int> res;
        std::unordered_map <int, int> map;
        for(int i=0;i<nums.size();i++)
            map[nums[i]]=i;

        for(int i=0;i<nums.size();i++){
            int tmp = target-nums[i];
            if(map.count(tmp) && map[tmp] != i){
                res.push_back(i);
                res.push_back(map[tmp]);
                break;
            }
        }
        return res;
}

2.3 set作哈希表
题目：
	349. 两个数组的交集，
	202.快乐数


Leetcode 349. 两个数组的交集
给定两个数组，编写一个函数来计算它们的交集。

输入：nums1 = [1,2,2,1], nums2 = [2,2]
输出：[2]
示例 2：

输入：nums1 = [4,9,5], nums2 = [9,4,9,8,4]
输出：[9,4]

说明：
输出结果中的每个元素一定是唯一的。
我们可以不考虑输出结果的顺序。


思路一：两个集合：
题目的说明是输出结果中的每个元素唯一，且不考虑输出结果顺序，可以用unordered_set<int>。


步骤：
1.先将一个数组nums1放到一个set中
2.依次遍历另一个数组nums2里的元素，如果能在set中找到，则存放在第二个set里(每个元素唯一)。
3.转成输出格式vector即可。


复杂度分析：
假设两个vector的长度为m，n。使用哈希查找O(1)找到元素，因此时间复杂度O(m+n)，空间复杂度O(m+n)

class Solution {
public:
    vector<int> intersection(vector<int>& nums1, vector<int>& nums2) {
        unordered_set<int> nums1_set(nums1.begin(), nums1.end());
        unordered_set<int> num_set;

        for(int i=0;i<nums2.size();i++){
            if(nums1_set.find(nums2[i]) != nums1_set.end())
                num_set.insert(nums2[i]);
        }

        return vector<int>(num_set.begin(), num_set.end());
    }
};


思路二：排序+双指针
如果两个数组有序，就可以使用双指针遍历数组，最后返回的数组里的元素是递增的。为了保证元素唯一性，可以使用额外变量pre记录上一次加入返回数组中的元素。

步骤：
1.排序两个数组
2.建立两个指针分别指向数组首个元素，每次比较两个元素值。如果两个数字不等，则将指向较小的值的指针右移；如果两个数字相等，且该数字不等于pre，可以将该数字添加到返回数组中，并更新pre变量，双指针后移一位；
3.当至少一个指针超出数组范围，遍历结束。

复杂度分析：
假设两个vector的长度为m，n，
时间复杂度：排序O(mlogm + nlogn)，双指针遍历O(m + n)， 总O(mlogm + nlogn)
空间复杂度：排序使用的额外空间O(logm + logn)

class Solution {
public:
    vector<int> intersection(vector<int>& nums1, vector<int>& nums2) {
        vector<int> res;
        sort(nums1.begin(), nums1.end());
        sort(nums2.begin(), nums2.end());


        int m = nums1.size();
        int n = nums2.size();


        int i=0, j=0;
        while(i < m && j < n){
            if(nums1[i] != nums2[j]){
                if(nums1[i] < nums2[j])
                    i++;
                else
                    j++;
            }else{
                if(res.size() == 0 || res.back() != nums1[i]){
                    res.push_back(nums1[i]);
                }
                i++;
                j++;
            }
        }
        return res;
    }
};

Leetcode202.快乐数
编写一个算法来判断一个数 n 是不是快乐数。

「快乐数」定义为：
对于一个正整数，每一次将该数替换为它每个位置上的数字的平方和。
然后重复这个过程直到这个数变为 1，也可能是 无限循环 但始终变不到 1。
如果 可以变为  1，那么这个数就是快乐数。
如果 n 是快乐数就返回 true ；不是，则返回 false 。

示例 1：
输入：19
输出：true
解释：
12 + 92 = 82
82 + 22 = 68
62 + 82 = 100
12 + 02 + 02 = 1

示例 2：
输入：n = 2
输出：false
 

这道题是说如果值的每个位数^2相加不断计算能最终值等于1就是快乐数，所以有三种情况：1.值通过循环是快乐数，2.值进入到无限重复的循环。3.值无穷大例子 ：
1.是快乐数：7->49->97->130->10->1
2.无限循环：116->38->73->58->89->145->42->20->4->16->37->58                      
                        |_______________________________|   
3.无穷大：81->162->243->324->1053...


思路一：找出过程中的重复的数字避免无限循环，因此可以考虑用哈希法，将不能变成快乐数的值直接存储下来，如果查到该值，则返回false。
判断sum是否重复出现用unordered_set方法：1.初始化unordered_set，对n求成每个位的平方和sum，如果sum==1，返回true。
如果不是在set中找不到就加入到set中，如果新的数字在set中，返回false。2.将sum重复赋值给n，重复2过程
假设从n到1或者无限循环重复需要x次
时间复杂度O(x)，
空间复杂度O(x)

class Solution {
public:
    int getSum(int n){ //n的每个位的平方和
        int sum = 0;
        while(n){
            sum += (n % 10) * (n % 10);
            n /= 10;
        }
        return sum;
    }

    bool isHappy(int n) {

        //建立一个set，存放那些不是快乐数的值
        std::unordered_set<int> set;

        while(1){
            int sum = getSum(n);

            if(sum == 1)
                return true;
            if(set.find(sum) != set.end())
                return false;
            else{
                set.insert(sum);
            }
            n = sum;
        }
    }
};


思路二：快慢指针
把转化过程中的每个数看作链表里的一个节点，把1看作链表的最后一个节点，如果从n无法到1，则说明链表中有环。

1.我们设定两个指针fast，slow初始化都是n
2.当fast != slow时，fast转化2次（走2步），slow转化1次（1步）。如果fast != slow，则不断循环
3.如果fast == slow 并且slow==1则说明是快乐数，否则不是快乐数。

时间复杂度：
当不循环时，fast先到达1时slow刚好到链表的一半，最坏情况O(2 * logn) = O(logn)
当循环时，从链表头部开始计算，时间复杂度O(logn)
空间复杂度O(1):常数的空间

class Solution {
public:
    int getSum(int n){
        int sum = 0;
        while(n){
            sum += (n % 10) * (n % 10);
            n /= 10;
        }
        return sum;
    }

    bool isHappy(int n) {
        int fast = n;
        int slow = n;
        do{
            fast = getSum(fast);
            fast = getSum(fast);
            slow = getSum(slow);
        }while(fast != slow);

        return slow == 1;
    }
};


思路三：数学法
1.既然会有无限循环的情况，可以通过数学公式推算出不快乐数，存入数组。
2.输入的值不断求位的平方和后如果在数组中，返回false，否则返回true。

不快乐数组：4→16→37→58→89→145→42→20

class Solution {
public:
    int getSum(int n){
        int sum = 0;
        while(n){
            sum += (n % 10) * (n % 10);
            n /= 10;
        }
        return sum;
    }

    bool isHappy(int n) {
        while(n != 1){
            if(n == 4 || n== 16 || n==37 || n==58 || n==89 || n==145 || n==42 || n==20)
                return false;
            n = getSum(n);
        }
        return true;
    }
};

2.4 双指针问题：
Leetcode 15. 三数之和
Leetcode 350. 两个数组的交集 II
Leetcode 18. 四数之和


Leetcode 15. 三数之和
给你一个包含 n 个整数的数组 nums，判断 nums 中是否存在三个元素 a，b，c ，使得 a + b + c = 0 ？请你找出所有和为 0 且不重复的三元组。
注意：答案中不可以包含重复的三元组。

示例 1：
输入：nums = [-1,0,1,2,-1,-4]
输出：[[-1,-1,2],[-1,0,1]]

示例 2：
输入：nums = []
输出：[]

示例 3：
输入：nums = [0]
输出：[]
 
提示
0 <= nums.length <= 3000
-105 <= nums[i] <= 105

思路一：暴力解法 时间复杂度O(n3)，空间复杂度O(1)


思路二：
    哈希表：建立两层循环确定a和b， 使用哈希法确定0-(a+b)的取值是否在数组中存在过，如果存在则产出一个vector，如果不存在，将b的值存放到set中
    时间复杂度O(n2), 空间复杂度O(n)

    其中的细节过多：
    1.排序，排完如果首元素直接>0，则直接可以continue
    2.答案中不可以包含重复的三元组。则需要对a，b，c去重。
    */
class Solution {
public:

    vector<vector<int>> threeSum(vector<int>& nums) {
        vector<vector<int>> res;
        if(nums.size() == 0) return res;
        
        sort(nums.begin(), nums.end());

        //找出a + b + c =  0
        // a = nums[i]  b = nums[j]  c = 0 - (a + b)
        for(int i=0;i<nums.size();i++){

            //a 去重，比如数组[-1, -1, 2]
            if(i > 0 && nums[i] == nums[i-1])
                continue;

            std::unordered_set<int> set;
            for(int j = i + 1; j < nums.size(); j++){


                if(j > i + 2 & nums[j] == nums[j-1] && nums[j-1] == nums[j-2]) //b 去重
                    continue;

                int c = 0 - (nums[i] + nums[j]);
                if(set.find(c) != set.end()){

                    res.push_back({nums[i], nums[j], c});
                    set.erase(c);  //c 去重

                }else{

                    set.insert(nums[j]);
                }
            }
        }
        return res;
    }
};


思路三：此题中是排序+三指针比哈希表方法更简单。
    /*
    排序 + 三指针法： 先固定一个指针，然后移动剩余2个指针，把问题弱化到TwoSum的问题上
    1.从下标0位置开始对于元素i，去重判断，建立左右指针left=i+1, right=size-1， 三者元素之和nums[i] + nums[]left] + nums[right]。因为排序好了，则移动指针：
    2.如果nums[i] + nums[]left] + nums[right] > 0 则右指针往前移动，直到left和right相遇
    3.如果nums[i] + nums[]left] + nums[right] < 0小于0则左指针往后移，直到left和right相遇
    4.如果值=0则表示找到一个，left和right都做去重判断，左右指针都移动，直到left和right相遇
    时间复杂度O(n2), 空间复杂度O(2)
    */
class Solution {
public:

    vector<vector<int>> threeSum(vector<int>& nums) {
        vector<vector<int>> res;


        sort(nums.begin(), nums.end());


        //找a + b + c = 0， a=nums[i], b=nums[left], c=nums[right]
        for(int i=0;i<nums.size();i++){
            if(i > 0 && nums[i] == nums[i-1])
                continue;
            int left = i + 1;
            int right = nums.size() - 1;


            while(left < right){
                if(nums[i] + nums[left] + nums[right] > 0)
                    right--;
                else if(nums[i] + nums[left] + nums[right] < 0)
                    left++;
                else{
                    res.push_back({nums[i], nums[left], nums[right]});


                    while(left < right && nums[left] == nums[left + 1])
                        left++;
                    while(left < right && nums[right] == nums[right - 1])
                        right--;


                    left++;
                    right--;
                }
            }
        }
        return res;
    }
};




Leetcode 350. 两个数组的交集 II
给定两个数组，编写一个函数来计算它们的交集。

示例 1：
输入：nums1 = [1,2,2,1], nums2 = [2,2]
输出：[2,2]

示例 2:
输入：nums1 = [4,9,5], nums2 = [9,4,9,8,4]
输出：[4,9]
 
说明：
输出结果中每个元素出现的次数，应与元素在两个数组中出现次数的最小值一致。
我们可以不考虑输出结果的顺序。
进阶：

如果给定的数组已经排好序呢？你将如何优化你的算法？
如果 nums1 的大小比 nums2 小很多，哪种方法更优？
如果 nums2 的元素存储在磁盘上，内存是有限的，并且你不能一次加载所有的元素到内存中，你该怎么办？

 思路一：
   哈希表：该题和349不同，该题要输出全部交集且不去重，用unordered_map。

步骤：类似349的思路：
    1.先将一个数组nums1放到一个map中
    2.依次遍历另一个数组nums2里的元素，如果map元素的次数>0 则map元素的次数-1， 且存放到返回的数组中
    3.转成输出格式vector即可。


class Solution {
public:

    vector<int> intersect(vector<int>& nums1, vector<int>& nums2) {
        vector<int>  res;
        std::unordered_map<int, int> map;
        for(int i = 0; i < nums1.size(); i++)
            map[nums1[i]]++;
        for(int j = 0; j < nums2.size(); j++){
            if(map[nums2[j]] > 0)
            {
                res.push_back(nums2[j]);
                map[nums2[j]]--;
            }
        }
        return res;
    }
};


思路二： 排序+双指针 步骤： 1.排序两个数组 2.建立两个指针分别指向数组首个元素，每次比较两个元素值。如果两个数字不等，则将指向较小的值的指针右移；如果两个数字相等，可以将该数字添加到返回数组中，双指针后移一位； 
class Solution {
public:  
    vector<int> intersect(vector<int>& nums1, vector<int>& nums2) { 
        vector<int> res; 
        sort(nums1.begin(), nums1.end()); 
        sort(nums2.begin(), nums2.end()); 
        int m = nums1.size(), n = nums2.size(); 

        int i = 0, j = 0; 
        while(i < nums1.size() && j < nums2.size()){ 
            if(nums1[i] == nums2[j]){ 
                res.push_back(nums1[i]); i++; j++; 
            }else if(nums1[i] < nums2[j]){ 
                i++; 
            }else{ 
                j++; 
            } 
        } 
    return res; 
    } 
};


Leetcode 18：四数之和给定一个包含 n 个整数的数组 nums 和一个目标值 target，判断 nums 中是否存在四个元素 a，b，c 和 d ，使得 a + b + c + d 的值与 target 相等？找出所有满足条件且不重复的四元组。注意：答案中不可以包含重复的四元组。示例 1：输入：nums = [1,0,-1,0,-2,2], target = 0输出：[[-2,-1,1,2],[-2,0,0,2],[-1,0,0,1]]示例 2：输入：nums = [], target = 0输出：[] 暴力方法：时间复杂度O(n4)思路一：排序 + 两层循环 + 双指针法：解法就是：两层for循环，nums[i]+nums[j]为固定值，依然内层循环里是left和right为双指针，找出nums[i]+nums[j]+nums[left]+nums[right]==target的情况。三数之和的时间复杂度是O(n2)，四数之和的时间复杂度是O(n3)。同理五数之和，六数之和都是该方法。class Solution {public:    vector<vector<int>> fourSum(vector<int>& nums, int target) {        vector<vector<int>> res;        if(nums.size() < 4) return res;        //排序        sort(nums.begin(), nums.end());        for(int i = 0; i < nums.size(); i++){            if(i > 0 && nums[i] == nums[i - 1])                continue;            for(int j = i+1; j < nums.size(); j++){                if(j > i+1 && nums[j] == nums[j - 1])                    continue;                int a = nums[i] + nums[j];                int left = j + 1;                int right = nums.size() - 1;                while(left < right){                    if(a + nums[left] + nums[right] < target){                        left++;                    }else if(a + nums[left] + nums[right] > target)                        right--;                    else{                        res.push_back({nums[i], nums[j], nums[left], nums[right]});                        while(nums[left] == nums[left + 1])                            left++;                        while(nums[right] == nums[right - 1])                            right--;                        left++;                        right--;                    }                }            }        }        return res;    }};双指针法将时间复杂度从O(n^2)降低到O(n)的题目：三数之和四数之和移除元素操作链表：
给定一个包含 n 个整数的数组 nums 和一个目标值 target，判断 nums 中是否存在四个元素 a，b，c 和 d ，使得 a + b + c + d 的值与 target 相等？找出所有满足条件且不重复的四元组。

注意：答案中不可以包含重复的四元组。

示例 1：
输入：nums = [1,0,-1,0,-2,2], target = 0
输出：[[-2,-1,1,2],[-2,0,0,2],[-1,0,0,1]]
示例 2：

输入：nums = [], target = 0
输出：[]
 

暴力方法：时间复杂度O(n4)


思路一：排序 + 两层循环 + 双指针法：
解法就是：两层for循环，nums[i]+nums[j]为固定值，依然内层循环里是left和right为双指针，找出nums[i]+nums[j]+nums[left]+nums[right]==target的情况。三数之和的时间复杂度是O(n2)，四数之和的时间复杂度是O(n3)。同理五数之和，六数之和都是该方法。

class Solution {
public:
    vector<vector<int>> fourSum(vector<int>& nums, int target) {
        vector<vector<int>> res;
        if(nums.size() < 4) return res;


        //排序
        sort(nums.begin(), nums.end());


        for(int i = 0; i < nums.size(); i++){
            if(i > 0 && nums[i] == nums[i - 1])
                continue;


            for(int j = i+1; j < nums.size(); j++){
                if(j > i+1 && nums[j] == nums[j - 1])
                    continue;


                int a = nums[i] + nums[j];


                int left = j + 1;
                int right = nums.size() - 1;


                while(left < right){
                    if(a + nums[left] + nums[right] < target){
                        left++;
                    }else if(a + nums[left] + nums[right] > target)
                        right--;
                    else{
                        res.push_back({nums[i], nums[j], nums[left], nums[right]});


                        while(nums[left] == nums[left + 1])
                            left++;
                        while(nums[right] == nums[right - 1])
                            right--;


                        left++;
                        right--;
                    }
                }
            }
        }
        return res;
    }
};

Leetcode 27. 移除元素给你一个数组 nums 和一个值 val，你需要 原地 移除所有数值等于 val 的元素，并返回移除后数组的新长度。
不要使用额外的数组空间，你必须仅使用 O(1) 额外空间并 原地 修改输入数组。

元素的顺序可以改变。你不需要考虑数组中超出新长度后面的元素。

说明:

为什么返回数值是整数，但输出的答案是数组呢?

请注意，输入数组是以「引用」方式传递的，这意味着在函数里修改输入数组对于调用者是可见的。

你可以想象内部操作如下:

// nums 是以“引用”方式传递的。也就是说，不对实参作任何拷贝
int len = removeElement(nums, val);

// 在函数里修改输入数组对于调用者是可见的。
// 根据你的函数返回的长度, 它会打印出数组中 该长度范围内 的所有元素。
for (int i = 0; i < len; i++) {
    print(nums[i]);
}
 
示例 1：
输入：nums = [3,2,2,3], val = 3
输出：2, nums = [2,2]
解释：函数应该返回新的长度 2, 并且 nums 中的前两个元素均为 2。你不需要考虑数组中超出新长度后面的元素。例如，函数返回的新长度为 2 ，而 nums = [2,2,3,3] 或 nums = [2,2,0,0]，也会被视作正确答案。



题目理解：返回数组里面不包含val的值个数。不要使用额外的数组空间，必须仅使用 O(1) 额外空间并 原地修改输入数组。

思路一：暴力法：因为数组中的元素的内存地址是连续的，暴力法两层循环，当一个元素==val时，在第二层循环里将该元素后面的元素全部往前移动一位。
        时间复杂度O(n^2), 空间复杂度O(1)
 
class Solution {
public:
    int removeElement(vector<int>& nums, int val) {
        
        int size = nums.size();
        for(int i = 0;i < size; i++){
            if(nums[i] == val){
                for(int j = i + 1; j < size; j++){
                    nums[j - 1] = nums[j];
                }
                i--; //因为后面的元素都往前移动一个，因此i需要向前移动一位
                size--; //此时数组的大小-1
            }
        }
        return size;
    }
};

思路二：双指针方法，通过一个快慢指针在一个for循环里。
        时间复杂度O(n), 空间复杂度O(1)
如何理解：
假设我们有一块和nums一样的空间，遍历源数组：
0 1 2 3 3 0 4 2
i
0 1 3 3 0 4
j
1.设定2个指针，i指向nums的0位置，j指向新空间的0位置
1.如果数值和val相同，则i后移一位
2.如果数值和val不同，则i指向的数值赋值到新的数组里j。然后j下标加一
只是此题中我们的旧数组和新数组同用一个空间。

class Solution {
public:
    int removeElement(vector<int>& nums, int val) {
        int slow = 0;
        int fast = 0;
        for(fast = 0; fast < nums.size(); fast++){
            if(nums[fast] != val)
                nums[slow++] = nums[fast];
        }
        return slow;


    }
};

26.删除排序数组中的重复项
给你一个有序数组 nums ，请你 原地 删除重复出现的元素，使每个元素 只出现一次 ，返回删除后数组的新长度。

不要使用额外的数组空间，你必须在原地修改输入数组，并在使用 O(1) 额外空间的条件下完成。

示例 1：
输入：nums = [1,1,2]
输出：2, nums = [1,2]
解释：函数应该返回新的长度 2 ，并且原数组 nums 的前两个元素被修改为 1, 2 。不需要考虑数组中超出新长度后面的元素。


思路：不要使用额外的数组空间，你必须在原地修改输入数组，并在使用 O(1) 额外空间的条件下完成。

如何理解：
假设我们有一块和nums一样的空间，遍历源数组：
0 0 1 2 2 3 3 4
i    
0 0 1 2 2 3 3 4
j
1.设定2个指针，i指向nums的0位置，j指向新空间的0位置
1.让i遍历，如果nums[i]!=nums[i+1]，则先让j+1，再将i+1指向的数值赋值到新的数组里。i++
2.如果nums[i]==nums[i+1]，则i后移一位
3.最终返回j+1即可
只是此题中我们的旧数组和新数组同用一个空间。

class Solution {
public:
    int removeDuplicates(vector<int>& nums) {
        if(nums.size() == 1) 
            return 0;

        int slow=0;
        int fast=0;
        for(fast;fast<nums.size()-1;fast++){
            if(nums[fast] != nums[fast+1])
            {
                nums[++slow] = nums[fast+1];
            }
        }
        return slow+1;
    }
};

定义链表的结构体：

struct ListNode{
    int val;        //节点存储的元素
    ListNode *next; //指向下一个节点
    ListNode(0) : val(0), next(null){}
    ListNode(int x) : val(x), next(null){} //节点的构造函数

};

链表分类：单链表，双链表，循环链表


常见链表题目：
203 移除链表元素 https://leetcode-cn.com/problems/remove-linked-list-elements/
206.反转链表
19.删除链表的倒数第N个节点
链表相交
142题.环形链表II



 203 移除链表元素


删除链表元素的操作：cur->next = cur->next->next。再释放该节点空间即可。在c++中不释放空间也是可以的。
操作一：直接在原来链表中删除，
操作二：新建一个虚拟头节点

思路一，直接使用原来的链表进行删除操作：
1.如果删除的节点是头节点，只需要将头节点向后移一位，将下一个节点返回即可。
2.如果删除的节点不是头节点，则将cur->next = cur->next->next

class Solution {public:    ListNode* removeElements(ListNode* head, int val) {        //删除头节点        while(head==NULL || head->val == val){            ListNode *tmp = head;            head = head->next;            delete tmp;        }                //删除的不是头节点        ListNode *cur = head;        while(cur && cur->val != val){            if(cur->next->val ==val ){                ListNode *tmp = cur->next;                cur->next = tmp->next;                delete tmp;                }else{                cur = cur->next;            }        }        return head;    }}思路二：新建一个虚拟头节点class Solution {public:    ListNode* removeElements(ListNode* head, int val) {        ListNode *headtmp = new ListNode(-1);        headtmp->next = head;        ListNode *cur = headtmp;        while(cur->next){            if(cur->next->val == val){                ListNode *tmp = cur->next;                cur->next = tmp->next;                delete tmp;            }else{                cur = cur->next;            }        }        head = headtmp->next;        delete headtmp;        return head;    }}206.反转链表


思路：三指针法迭代法。通过改变链表的指针指向，让链表反转。
1.首先建立一个pre初始化null，一个cur指向头节点。
2.首先把cur->next保存下来，设为next。链表反转后cur->next就变成pre了。那下一个cur变成pre，next就变成下一个cur。
1 -> 2 -> 3 -> 4 -> null

null    1 -> 2 -> 3 -> 4 -> null
pre    cur  next

null <- 1    2  -> 3
 pre   cur  next

null <- 1    2  -> 3
        pre  cur  next
.......

class Solution {
public:
    ListNode* reverseList(ListNode* head) {
        if(head==NULL) return NULL;
        ListNode *pre = NULL;
        ListNode *cur = head;
        while(cur){
            ListNode *next = cur->next;
            cur->next = pre;
            pre = cur;
            cur = next;
        }
        return pre;
    }
};

//思路二：尾递归方法，该方法还是和三指针法逻辑类似，只是用递归法来做。同样将cur==NULL作为循环结束，不断将cur指向pre的过程。
class Solution {
public:
    ListNode* reverseList(ListNode* head) {
        return Reverse(NULL, head);
    }
    ListNode *Reverse(ListNode *pre, ListNode *cur){
        if(cur == NULL) return pre;
        ListNode *next = cur -> next;
        cur->next = pre;
        return Reverse(pre, next);
    }
}

19.删除链表的倒数第N个节点


给你一个链表，删除链表的倒数第 n 个结点，并且返回链表的头结点。
进阶：你能尝试使用一趟扫描实现吗？

思路：快慢指针的方法，建立一个虚拟节点。
1.我们先建立一个空指针，通过建立两个指针fast，slow，从空指针开始。因为要删除倒数第n个节点，我们先让fast走n+1步
2.当fast != NULL 时fast和slow同时移动，当fast==NULL时，slow的下一个节点就是要删除的节点。

class Solution {
public:
    ListNode* removeNthFromEnd(ListNode* head, int n) {
        ListNode *dummy = new ListNode(-1);
        dummy->next = head;
        ListNode *fast = dummy;
        ListNode *slow = dummy;
        while(n-- && fast != NULL){
            fast = fast->next;
        }
        fast = fast -> next;
        while(fast != NULL){
            fast = fast->next;
            slow = slow->next;
        }
        slow->next = slow->next->next;
        return dummy->next;
    }
};

思考：快慢指针的方法，直接在链表上操作。
1.如果head==NULL 直接返回NULL。
1.建立两个指针fast，slow=head， 因为要删除倒数第n个节点，我们先让fast走n步。如果fast此时是NULL，则说明链表没有n个元素长，则直接返回head->next;
2.当fast != NULL 时fast和slow同时移动，当fast==NULL时，slow的下一个节点就是要删除的节点。
class Solution {
public:
    ListNode* removeNthFromEnd(ListNode* head, int n) {
        if(!head) return NULL;
        ListNode *fast = head;
        ListNode *slow = head;
        for(int i=0;i<n;i++){
                fast = fast->next;
        }
        if(fast==NULL)
            return head->next;


        while(fast ->next){
            fast = fast->next;
            slow = slow->next;
        }
        slow->next = slow->next->next; //fast==NULL时slow的next就是要删除的元素
        return head;
    }
};


面试题 02.07. 链表相交

给你两个单链表的头节点 headA 和 headB ，请你找出并返回两个单链表相交的起始节点。如果两个链表没有交点，返回 null 。

题目中说求两个链交点的起始节点，因此不是值相同，而是指针相同。简单意思就是节点既在headA上也在headB上。

  4->1->8->4->5
    ^
    |
 5->0 

思路一：
1.先遍历两个链表的长度，lenA，lenB。求出链表长度差diff，先让长度长的链表走diff步。
2.然后两个链表同时走，如果指针指的值相同表示是环首，则返回。如果指针访问到最后都没有相同则返回NULL。
时间复杂度O(m+n)，空间复杂度O(1)

class Solution {
public:
    ListNode *getIntersectionNode(ListNode *headA, ListNode *headB) {
        if(headA==NULL || headB==NULL) return NULL;
        ListNode *t1 = headA;
        ListNode *t2 = headB;
        int lenA = 0;
        int lenB = 0;
        while(t1){
            lenA++;
            t1 = t1->next;
        }
        while(t2){
            lenB++;
            t2 = t2->next;
        }


        t1 = headA;
        t2 = headB;
        if(lenA>lenB){
            int diff = lenA-lenB;
            while(diff--) t1=t1->next;
        }else{
            int diff = lenB-lenA;
            while(diff--) t2=t2->next;
        }


        while(t1 && t2){
            if(t1 == t2) return t1;
            t1 = t1->next;
            t2 = t2->next;
        }
        return NULL;
    }
};

如果链表相交的部分长度是c，headA的链表不相加长度a，headB的链表不相交长度b，则 a + c + b = b + c + a
如果链表不相交，则 a + b = b + a.

所以思路二是：将两个链表前后链接在一起，acb，bca。然后遍历这个新的链表，如果两个链表有相交，则一定在新链表的相同长度处。

设置两个指针同时从headA，headB的头出发，然后一直对比是否节点相同，如果不同则一直后移一位，如果headA.next是null，则表明headA到头了，可以从headB开始，如果headB.next是null，则表明headB到头了，可以从headA开始。如果中间相交则返回，如果最终都遍历完则表明不相交，返回NULL。

class Solution {
public:
    ListNode *getIntersectionNode(ListNode *headA, ListNode *headB) {


      if(headA == NULL || headB == NULL) return NULL;


      ListNode *h1 = headA;
      ListNode *h2 = headB;
      while(h1 != h2){
          h1 = h1 == NULL ? headB : h1->next;
          h2 = h2 == NULL ? headA : h2->next;
      }
      return h1;
    }
};

142题 .环形链表II
给定一个链表，返回链表开始入环的第一个节点。 如果链表无环，则返回 null。

为了表示给定链表中的环，我们使用整数 pos 来表示链表尾连接到链表中的位置（索引从 0 开始）。 如果 pos 是 -1，则在该链表中没有环。注意，pos 仅仅是用于标识环的情况，并不会作为参数传递到函数中。

说明：不允许修改给定的链表。

进阶：
你是否可以使用 O(1) 空间解决此题？
 
输入：head = [3,2,0,-4], pos = 1
输出：返回索引为 1 的链表节点
解释：链表中有一个环，其尾部连接到第二个节点。

思路一：

读题说返回链表开始入环的第一个节点, 如果链表无环则返回 null。所以第一步是需要判断是否链表有环，第二步是对有环链表返回第一个入环的节点。

第一个问题：判断是否有环可以使用快慢指针fast，slow，fast每次走两步，慢指针每次走一步，如果有环一定会相遇。
第二个问题：说明快慢指针相遇的地方不一定是环的首节点，假设从链表起始点到环的起始点长度是a，环起始点到相遇点是b，相遇点到环的起始点是c。

———x———\——\
        \  \  y
     z   \— \ 相遇

相遇时slow慢指针走了x+y,  快指针fast走了x+n(y+z)+y。n是fast在圈里走了n圈。因为fast指针每次走2步，slow慢指针每次走一步，则快指针走的节点数是慢指针的2倍。
 x+n(y+z)+y = 2 * (x +y)  =>  n(y+z) = x+y  => (n-1)*(y+z) + z = x。  

如果fast快指针只走了1圈 n=1，则x = z,
则说明设置两个指针idx1从链表起始点开始走，idx2从相遇点开始走，那他们相遇的地方就是链表的起始点。
如果fast快指针走了n圈，则是fast在圈里转了n圈后才遇到slow。效果和情况一一样。 
时间复杂度O(n)，空间复杂度O(1)

class Solution {
public:
    ListNode *detectCycle(ListNode *head) {
        ListNode* fast = head;
        ListNode* slow = head;
        while(fast != NULL && fast->next != NULL) {
            slow = slow->next;
            fast = fast->next->next;
            // 快慢指针相遇，此时从head 和 相遇点，同时查找直至相遇
            if (slow == fast) {  //链表有环，此时在环中相遇
                ListNode* index1 = fast;
                ListNode* index2 = head;
                while (index1 != index2) {
                    index1 = index1->next;
                    index2 = index2->next;
                }
                return index2; // 返回环的入口
            }
        }
        return NULL;
    }
}; 
               
思路二：使用哈希表，将每个节点存到哈希表里，此处使用set结构，因为不需要去key有序，不需要存储value值。
时间复杂度O(n)，空间复杂度O(n)
class Solution {
public:
    ListNode *detectCycle(ListNode *head) {
        std::unordered_set<ListNode *> set;
        while(head!=NULL){
            if(set.count(head)){
                return head;
            }
            set.insert(head);
            head = head->next;
        }
        return NULL;
    }
};


 92.反转链表 II


思路一：将需要反转的部分通过反转链表1的方法反转，因此找到待反转链表的往前一个节点和往后一个节点就至关重要。

方法一，将需要反转的链表截取出来，反转后再拼接。
举例：反转3-6部分，则
1->2->3->4->5->6->7

1->2->3->4->5->6->7
     |            |
    pre1          last1


1->2              7

     3<-4<-5<-6

1->2->6->5->4->3->7

class Solution {
public:
    void reverse(ListNode *node){
        ListNode *pre=NULL;
        ListNode *cur = node;
        while(cur != NULL){
            ListNode *next = cur->next;
            cur->next = pre;
            pre = cur;
            cur = next;
        }
    }
    ListNode* reverseBetween(ListNode* head, int left, int right) {
        ListNode *dummy = new ListNode(-1);
        dummy->next = head;


        //1.遍历到left的前一个节点
        ListNode *pre = dummy;
        for(int i=1;i<left;i++){
            pre = pre->next;
        }


        //2.从pre走right-left+1步就可以到right节点
        ListNode *rightNode = pre;
        for(int i=0;i<right-left+1;i++)
            rightNode = rightNode->next;


        //3.切断出来一个子链表
        ListNode *leftNode = pre->next;
        ListNode *curr = rightNode->next;


        pre->next = NULL;
        rightNode->next = NULL;
        
        //4.反转
        reverse(leftNode);


        //5.将链表连接起来
        pre->next = rightNode;
        leftNode->next = curr;


        return dummy->next;
    }
};

步骤：尾插法
1.第一步由于反转链表可能发生在头部，因此需要先建立一个虚拟节点dummy
2.建立一个指针访问到left的前一个节点shop
3.将left-right做链表反转，记下链表最后往后一个节点
4.将链表的头尾重新赋给新的链表位置。
class Solution {
public:
    ListNode* reverseBetween(ListNode* head, int left, int right) {
        ListNode *dummy = new ListNode(-1);
        dummy->next = head;


        //1.遍历到left的前一个节点
        ListNode *shop = dummy;
        for(int i=1;i<left;i++){
            shop = shop->next;
        }


        //2.将left-right之间的节点做反转链表I的操作。
        ListNode *pre=NULL;
        ListNode *cur = shop->next;
        for(int i=0;i<=right-left;i++){
            ListNode *next = cur->next;
            cur->next = pre;
            pre=cur;
            cur=next;
        }


        //3.将链表连接起来
        shop->next->next = cur;
        shop->next = pre;


        return dummy->next;
    }
};

回文链表
给你一个单链表的头节点 head ，请你判断该链表是否为回文链表。如果是，返回 true ；否则，返回 false 。
输入：head = [1,2,2,1]
输出：true
输入：head = [1,2]
输出：false


思路一：回文链表的意思就是元素是对称的，将所有的元素都放到stack里面，然后从链表头部开始，如果每个元素和stack的栈顶元素值不同，则不是回文链表，返回false。如果遍历完都相同，则说明是回文，返回true。
时间复杂度O(n)，空间复杂度O(n)

class Solution {
public:
    bool isPalindrome(ListNode* head) {
        stack<ListNode *> st;
        ListNode *cur = head;
        while(cur){
            st.push(cur);
            cur=cur->next;
        }
        while(head){
            int top = st.top()->val;
            if(top != head->val)
                return false;
            st.pop();
            head=head->next;
        }
        return true;
    }
};

其实可以往栈里放一半的数据，此时就需要使用快慢指针确定中间的位置。
时间复杂度O(n)，空间复杂度O(n)

 
思路二：由于是回文的链表，回文是头尾对称，
1.可以使用快慢指针，当fast快指针到链表尾部时slow慢指针刚好到链表中间，此处需要先确定slow的位置。
 比如链表奇数 1-2-3-2-1  
                 |   | 
                slow fast 
 比如链表偶数数 1-2-3-3-2-1 null 
                     |      |
                   slow    fast
2.将后半部分的链表反转
  
3.反转后两个链表都从头开始遍历，如果没遍历完但有节点的值不同，则返回false。如果遍历完都节点值相同则返回true。
时间复杂度O(n)，空间复杂度O(1)

class Solution {
public:
    bool isPalindrome(ListNode* head) {
        //1.建立快慢指针
        ListNode *fast = head;
        ListNode *slow = head;
        while(fast && fast->next){
            fast = fast->next->next;
            slow = slow->next;
        }

        //2.判断一下链表的长度，如果是长度是偶数，现在slow在后半段的首节点上,fast在null；如果长度是奇数，现在slow刚好在链表正中间，fast在最后一个节点
       //比如1->2->3->2->1
        if(fast != NULL) slow=slow->next;

        //3.将后半段链表反转，此处的slow就相当于cur。反转完成后1->2->3<-2<-1
        ListNode *pre = NULL;
        while(slow){
            ListNode *next = slow->next;
            slow->next = pre;
            pre = slow;
            slow = next;
        }

        //4.从链表的两端开始逐个比较
        while(pre && head){
            if(pre->val != head->val)
                return false;
            pre=pre->next;
            head=head->next;
        }
        return true;
    }
};
